#
# MAKEFILE for stevedore

#
# binary output name
BINARY=stevedore

#
# project name
PROJECT=stevedore

#
# Values Version and Commit
VERSION=`cat version || echo "unknown"`
COMMIT=`git rev-parse --short HEAD || echo "unknown"`
BUILD_DATE=`date +"%c"`

#
# folder to store artifacts generated
ARTIFACTS_DIR=dist

#
# working dir
WORKING_DIR=`pwd`

#
# Go options
GO_TEST_OPTS=-count=1 -parallel=4 -v

#
# checksum
CHECKSUM=md5sum
CHECKSUM_EXT=md5

#
# Setup the -ldflags option for go build here, interpolate the variable values
#  -s: Omit the symbol table and debug information.
#  -w: Omit the DWARF symbol table
LDFLAGS=-ldflags "-s -w -X ${PROJECT}/internal/release.Version=${VERSION} -X ${PROJECT}/internal/release.Commit=${COMMIT} -X '${PROJECT}/internal/release.BuildDate=${BUILD_DATE}'"

#
# dafault target
.DEFAULT_GOAL: all

# define phony targets
.PHONY: clean install build test unit_test functional_test tar notes tag

#
# build the binary and deploy a container with it
all: tar

#
# BINARY TARGETS
# 

#
# build the binary
#
# "...We’re disabling cgo which gives us a static binary. 
# We’re also setting the OS to Linux (in case someone builds this on a Mac or Windows) 
# and the -a flag means to rebuild all the packages we’re using, 
# which means all the imports will be rebuilt with cgo disabled..."
#
# reference: https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/
#

build-dev: clean test
	CGO_ENABLED=0 GOOS=linux go build ${LDFLAGS} -a -o ${BINARY} cmd/${BINARY}.go

build: clean
	CGO_ENABLED=0 GOOS=linux go build ${LDFLAGS} -a -o bin/${BINARY} cmd/${BINARY}.go

checksum: build
	${CHECKSUM} bin/${BINARY} > bin/${BINARY}.${CHECKSUM_EXT}

#
# install compiled dependencies in $GOPATH/pkg and put the binary in $GOPATH/bin
install: clean test
	go install ${LDFLAGS} ./...

dependencies:
	go mod download

#
# execute all tests
test: unit_test functional_test

unit_test:
	go test ${GO_TEST_OPTS} ./...

vet:
	go vet ${LDFLAGS} ./...

#
# generate and artifact
tar: checksum
	mkdir -p ${ARTIFACTS_DIR}
	tar cvzf ${ARTIFACTS_DIR}/${BINARY}-${VERSION}.tar.gz bin/${BINARY} bin/${BINARY}.${CHECKSUM_EXT}
	rm -rf bin/${BINARY} bin/${BINARY}.${CHECKSUM_EXT}
#
# clear binaries generated by install or build targets
clean:
	if [ -f bin/${BINARY} ] ; then rm -f bin/${BINARY} ; rm -f $$GOPATH/bin/${BINARY} ; fi
	if [ -f bin/${BINARY}.${CHECKSUM_EXT} ] ; then rm -f bin/${BINARY}.${CHECKSUM_EXT} ; fi
	if [ -f ${ARTIFACTS_DIR}/${BINARY}-${VERSION}.tar.gz ] ; then rm -f ${ARTIFACTS_DIR}/${BINARY}-${VERSION}.tar.gz ; fi

notes:
	echo "# RELEASE NOTES" > aux && \
	echo "" >> aux & \
	echo "## ${VERSION}" >> aux && \
	echo "" >> aux & \
	git log --format="- %h: %s" `git describe --tags --abbrev=0 @^`..@ >> aux && \
	LINES=`cat RELEASE_NOTES.md | wc -l` && \
	tail -n `expr $$LINES - 1` RELEASE_NOTES.md >> aux && \
	mv aux RELEASE_NOTES.md

tag:
	git checkout master
	git pull origin master
	git tag -a v${VERSION} -m "Version v${VERSION}"
	git push origin v${VERSION}
