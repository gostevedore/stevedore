#
# Stevedore is a Docker's images factory, a tool that can manage bunches of Docker images builds in just one command. It improves the way you build and promote your Docker images. Is not a Dockerfile's or Buildkit alternative, but a way of us them to have a better building experience

#
# Images tree location path
#  default value:
#    images_path: stevedore.yaml
images_path: mystevedore.yaml

#
# Builders location path
#  default value:
#    builders_path: stevedore.yaml
builders_path: mystevedore.yaml

#
# Log file location path
#  default value: 
#    log_path: /var/log/stevedore.log
log_path: mystevedore.log

#
# It defines the number of workers to build images which corresponds to the number of images that can be build concurrently
#  default value: 
#    concurrency: 4
concurrency: 10

#
# Push images automatically after build
#  default value: 
#    push_images: false
push_images: true

#
#Credentials storage
#  default value:
#    credentials:
#      storage_type: local
#      local_storage_path: /var/lib/stevedore/credentials
#      format: json
#
credentials:
  storage_type: local
  format: json
  local_storage_path: mycredentials
  
#
# Generate extra tags when the main image tags is semver 2.0.0 compliance
#  default value: false
#    semantic_version_tags_enabled: false
semantic_version_tags_enabled: true

# List of templates which define those extra tags to generate when 'semantic_version_tags_enabled' is enabled
# Parser will use the SemVer struct to generate the template, and all SemVer attributes could be used to define each template
# 
#   // SemVer is a sematinc version representation
#   type SemVer struct {
#       Major      string
#       Minor      string
#       Patch      string
#       PreRelease string
#       Build      string
#   }
#
#  default value: 
#    semantic_version_tags_templates:
#      - {{ .Major }}.{{ .Minor }}.{{ .Patch }}
semantic_version_tags_templates:
- "{{ .Major }}"

#
# Define builder types
# You could define builders on its own file. Stevedore will look up for builders on the file set at 'builders_path'
# 
# examples:
#   1) Define one builder named 'infrastructure' which use docker as driver and current folder as Docker build context
#
#      builders:
#       infrastructure:
#         driver: docker
#         options:
#           context:
#              path: .

#
# Define images tree
# You could define an images tree on its own file. Stevedore will look up for images tree on the file set at 'images_path'
# 
#  examples:
#    1) Define an images tree that has one image named 'ubuntu' which has two versions, '20.04' and '22.04'.
#       The image '20.04' has two children: 'php-fpm' and 'php-cli', both having the version '8.0' defined. And the image '22.04' has only one child: 'php-fpm', with version '8.1' defined.
#       
#       images:
#         ubuntu:
#           22.04:
#             namespace: infrastructure
#             builder: infrastructure
#             children:
#             - php-fpm:
#               - 8.1
#           20.04:
#             namespace: infrastructure
#             builder: infrastructure
#         php-fpm:
#           8.1:
#             builder:
#               driver: docker
#               context:
#                 path: php-fpm
#             vars:
#               version: 8.1
#           8.0:
#             builder:
#               driver: docker
#               context:
#                 path: php-fpm
#               vars:
#                 version: 8.0
#             parents:
#               ubuntu:
#                 - 20.04
#                 - 22.04
#         php-cli:
#           8.0:
#             builder:
#               driver: docker
#               context:
#                 path: php-fpm
#             vars:
#               version: 8.0
#             parents:
#               ubuntu:
#                 - 20.04
#                 - 22.04

